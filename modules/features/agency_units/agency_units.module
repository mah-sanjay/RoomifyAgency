<?php
/**
 * @file
 * Code for the agency_units feature.
 */

include_once 'agency_units.features.inc';

/**
 * Implements hook_views_default_views_alter().
 */
function agency_units_views_default_views_alter(&$views) {
  if (array_key_exists('bookable_units', $views)) {
    $view = $views['bookable_units'];
    $handler =& $view->display['default']->handler;
    $handler->display->display_options['access']['type'] = 'role';
    $handler->display->display_options['access']['role'] = array(
      3 => '3',
      4 => '4',
    );
  }
}

/**
 * Implements hook_views_pre_build()
 *
 * Allow agency owners to see all units on the 'My bookable units' view.
 */
function agency_units_views_pre_build(&$view) {

  // Using this permission as a proxy for admin or agency manager roles.
  // @todo: agency-specific permission needed?
  if ($view->name == 'my_bookable_units' && user_access('update any rooms_unit entity')) {
    unset($view->argument['uid']);
  }
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Modifications to availability search form on unit pages.
 */
function agency_units_form_rooms_booking_availability_search_form_block_alter(&$form, $form_state) {
  if ($unit = menu_get_object('rooms_unit', 1)) {
    $params = drupal_get_query_parameters();

    $form['bookable_units']['#default_value'] = $unit->unit_id;
    $form['bookable_units']['#access'] = FALSE;

    if (isset($params['rooms_start_date']['date']) && !empty($params['rooms_start_date']['date'])) {
      $arrivalDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_start_date']['date']);
      $arrival = $arrivalDateTime->format('Y-m-d');
      $form['rooms_date_range']['rooms_start_date']['#default_value'] = $arrival;
    }
    if (isset($params['rooms_end_date']['date']) && !empty($params['rooms_end_date']['date'])) {
      $endDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_end_date']['date']);
      $end = $endDateTime->format('Y-m-d');
      $form['rooms_date_range']['rooms_end_date']['#default_value'] = $end;
    }
    if (isset($params['group_size'])) {
      $form['rooms_fieldset']['group_size_adults:1']['#default_value'] = $params['group_size'];
    }

    if (isset($params['rooms_start_date']['date']) && isset($params['rooms_end_date']['date']) && isset($params['group_size'])) {
      $form['actions']['submit']['#value'] = t('Book Now');
    }
  }

  $form['actions']['submit']['#submit'] = array('agency_units_form_rooms_booking_availability_search_form_block_submit');
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Modifications to unit creation form for property owners.
 */
function agency_units_form_rooms_unit_edit_form_alter(&$form, $form_state) {

  // Set property owner field to author if no value is present.
  if (empty($form['field_owner'][LANGUAGE_NONE][0]['target_id']['#default_value'])) {
    $author = user_load($form['#entity']->uid);
    $form['field_owner'][LANGUAGE_NONE][0]['target_id']['#default_value'] = $author->name . ' (' . $author->uid . ')';
  }

  // Using this permission as a proxy for admin or agency manager roles.
  // @todo: agency-specific permission needed?
  if (!user_access('update any rooms_unit entity')) {

    // Don't let property owners feature/unfeature their own units.
    $form['field_property_featured']['#access'] = FALSE;

    // Don't let property owners update the bookable status if this unit has
    // not been published.
    if (!$form['#entity']->status) {
      $form['availability']['bookable']['#access'] = FALSE;
    }
  }

  // Unit creation modifications.
  if (!empty($form['#entity']->is_new)) {

    // Using this permission as a proxy for admin or agency manager roles.
    // @todo: agency-specific permission needed?
    if (!user_access('update any rooms_unit entity')) {

      // Don't let property owners make their new units bookable.
      $form['availability']['bookable']['#default_value'] = FALSE;
      $form['availability']['bookable']['#access'] = FALSE;

      // Don't let property owners publish their own units.
      $form['options']['status']['#default_value'] = FALSE;

      // Add our submission handler.
      $form['actions']['submit']['#submit'][] = 'agency_units_rooms_unit_edit_submit';
    }
  }
}

/**
 * Submit handler for rooms unit creation - This only runs for property owners.
 */
function agency_units_rooms_unit_edit_submit($form, &$form_state) {

  // Redirect to the my units page.
  $form_state['redirect'] = 'admin/rooms/my-units';
}

/**
 * Submit handler for rooms booking availability search.
 */
function agency_units_form_rooms_booking_availability_search_form_block_submit(&$form, &$form_state) {
  list($start_date, $end_date) = rooms_form_input_get_start_end_dates($form_state);

  $units = $form_state['values']['rooms'];

  $rooms_query = array();

  if (isset($form_state['values']['unit_type'])) {
    if (!empty($form_state['values']['unit_type'])) {
      $rooms_query['type'] = $form_state['values']['unit_type'];
    }
    else {
      $rooms_query['type'] = 'all';
    }
  }

  // Get parameter for AvailabilityAgentSingleUnitFilter.
  if (isset($form_state['values']['rooms_id'])) {
    $rooms_query['rooms_id'] = $form_state['values']['rooms_id'];
  }

  $rooms_query += rooms_booking_manager_get_plugin_parameters($form_state);

  // Collect the values for booking parameters.
  foreach ($form_state['values'] as $key => $value) {
    $keys = explode(':', $key);

    if (count($keys) == 2) {
      if ($keys[0] == 'group_size_adults') {
        $rooms_query['rooms_group_size' . $keys[1]] = $value;
      }
      if ($keys[0] == 'group_size_children') {
        $rooms_query['rooms_children' . $keys[1]] = $value;
      }
    }
  }

  $booking_parameters = rooms_booking_manager_retrieve_booking_parameters($units, $rooms_query);

  // Get all the units.
  $agent = new AvailabilityAgent($start_date, $end_date, $booking_parameters, $units, array_keys(array_filter(variable_get('rooms_valid_availability_states', drupal_map_assoc(array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST))))));

  $units_per_type = $agent->checkAvailability();

  // Give other modules a chance to change the search results.
  drupal_alter('rooms_booking_results', $units_per_type, $start_date, $end_date, $booking_parameters);

  // If we don't have any useful result to show just display a failure message.
  if (($units_per_type == ROOMS_NO_ROOMS) || ($units_per_type == ROOMS_SIZE_FAILURE)) {
    // Create a warning message.
    drupal_set_message(variable_get_value('rooms_booking_manager_warning_no_units_available'), 'warning');

    // If user doesn't search within unit page redirect to the main search page.
    if (!menu_get_object('rooms_unit', 1)) {
      $form_state['redirect'] = array('search-availability');
    }
  }
  else {
    $form_state['redirect'] = array(
      'booking/' . $start_date->format('Y-m-d') . '/' . $end_date->format('Y-m-d') . '/' . $units,
      array(
        'query' => $rooms_query,
      ),
    );
  }
}
