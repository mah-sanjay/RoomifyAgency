<?php
/**
 * @file
 * Code for the Agency Homepage feature.
 */

include_once 'agency_homepage.features.inc';

/**
 * Implements hook_ctools_plugin_directory()
 */
function agency_homepage_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_views_pre_view().
 */
function agency_homepage_views_pre_view($view, $display_id, $args) {
  if ($view->name == 'unit_availability_search') {
    drupal_add_css(drupal_get_path('module', 'agency_homepage') . '/agency_homepage.css');

    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');

    // Add CTools' javascript to the page.
    ctools_modal_add_js();
  }
}

/**
 * Implements hook_search_api_query_alter().
 *
 * @param SearchApiQueryInterface $query
 *   The search query being executed.
 *
 *  Modify the Search API query to take unit availability into account when our
 *  search bar is present.
 */
function agency_homepage_search_api_query_alter($query) {
  if ($query->getIndex()->getEntityType()) {
    $info = entity_get_info($query->getIndex()->getEntityType());

    // Only modify the query if this query is against rooms units.
    if ($info['base table'] = 'rooms_unit') {
      $params = drupal_get_query_parameters();

      // See if we have dates to search.
      if (isset($params['rooms_start_date']['date']) &&
          !empty($params['rooms_start_date']['date']) &&
          isset($params['rooms_end_date']['date']) &&
          !empty($params['rooms_end_date']['date'])) {
        $arrivalDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_start_date']['date']);
        $departureDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_end_date']['date']);

        $options = array();
        if (isset($params['group_size'])) {
          $options[] = array('adults' => $params['group_size']);
        }
        $agent = new AvailabilityAgent($arrivalDateTime, $departureDateTime, $options);
        $units = $agent->checkAvailability();

        // If no units are available, zero out results.
        if (!is_array($units)) {
          $query->condition($info['entity keys']['id'], 1, '<');
          return;
        }

        // Make array of unit IDs with availability.
        $ids = array();
        foreach ($units as $units_per_type) {
          foreach ($units_per_type as $units) {
            foreach ($units as $id => $unit) {
              $ids[] = $id;
            }
          }
        }

        // Limit the search API query to entity ids with availability.
        $query->condition($info['entity keys']['id'], $ids, 'IN');
      }
    }
  }
}
